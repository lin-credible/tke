/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2019 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package tkestack.io.tke.api.auth.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// APIKey contains expiration time used to apply the api key.
message APIKey {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta objectMeta = 1;

  // Spec defines the desired identities of APIkey in this set.
  optional APIKeySpec spec = 2;

  optional APIKeyStatus status = 3;
}

// LocalIdentityList is the whole list of all identities.
message APIKeyList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta listMeta = 1;

  // List of api keys.
  repeated APIKey items = 2;
}

// APIKeyReq contains expiration time used to apply the api key.
message APIKeyReq {
  // Exipre is required, holds the duration of the api key become invalid. By default, 168h(= seven days)
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration expire = 2;

  // Description describes api keys usage.
  optional string description = 3;
}

// APIKeyReqPassword contains userinfo and expiration time used to apply the api key.
message APIKeyReqPassword {
  // TenantID for user
  optional string tenantID = 2;

  // Username
  optional string username = 3;

  // Password (encoded by base64)
  optional string password = 4;

  // Description describes api keys usage.
  // +optional
  optional string description = 5;

  // Expire holds the duration of the api key become invalid. By default, 168h(= seven days)
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration expire = 6;
}

// APIKeySpec is a description of an apiKey.
message APIKeySpec {
  // APIkey is the jwt token used to authenticate user, and contains user info and sign.
  optional string apiKey = 1;

  optional string tenantID = 5;

  // Username is creator
  // +optional
  optional string username = 6;

  // Description describes api keys usage.
  // +optional
  optional string description = 2;

  // IssueAt is the created time for api key
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time issue_at = 3;

  // ExpireAt is the expire time for api key
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time expire_at = 4;
}

// APIKeyStatus is a description of an api key status.
message APIKeyStatus {
  // Disabled represents whether the apikey has been disabled.
  // +optional
  optional bool disabled = 1;
}

// APISigningKey hold encryption and signing key.
message APISigningKey {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +optional
  optional bytes signingKey = 2;

  // +optional
  optional bytes signingKeyPub = 3;
}

// APISigningKeyList is the whole list of all signing key.
message APISigningKeyList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of keys.
  repeated APISigningKey items = 2;
}

// Binding references the objects a policy applies to, but does not contain it.
message Binding {
  // Subjects holds references to the objects the policy applies to.
  // +optional
  repeated Subject subject = 1;
}

// ConfigMap holds configuration data for tke to consume.
message ConfigMap {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Data contains the configuration data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // Values with non-UTF-8 byte sequences must use the BinaryData field.
  // The keys stored in Data must not overlap with the keys in
  // the BinaryData field, this is enforced during validation process.
  // +optional
  map<string, string> data = 2;

  // BinaryData contains the binary data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // BinaryData can contain byte sequences that are not in the UTF-8 range.
  // The keys stored in BinaryData must not overlap with the ones in
  // the Data field, this is enforced during validation process.
  // +optional
  map<string, bytes> binaryData = 3;
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
message ConfigMapList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ConfigMaps.
  repeated ConfigMap items = 2;
}

// LocalIdentity is an object that contains the metadata about identify used to
// login to TKE.
message LocalIdentity {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of identity in this set.
  // +optional
  optional LocalIdentitySpec spec = 2;

  // +optional
  optional LocalIdentityStatus status = 3;
}

// LocalIdentityList is the whole list of all identities.
message LocalIdentityList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of identities.
  repeated LocalIdentity items = 2;
}

// LocalIdentitySpec is a description of an identity.
message LocalIdentitySpec {
  optional string name = 7;

  optional string displayName = 8;

  optional string email = 9;

  optional string phone = 10;

  optional string hashedPassword = 4;

  optional string originalPassword = 5;

  // +optional
  optional string tenantID = 2;

  repeated string groups = 6;

  // +optional
  map<string, string> extra = 3;
}

// LocalIdentityStatus is a description of an identity status.
message LocalIdentityStatus {
  // +optional
  optional bool locked = 1;

  // The last time the local identity was updated.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 2;
}

// Policy represents a policy document for access control.
message Policy {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of policy document in this set.
  // +optional
  optional PolicySpec spec = 2;

  // +optional
  optional PolicyStatus status = 3;
}

// PolicyList is the whole list of all policies.
message PolicyList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of policies.
  repeated Policy items = 2;
}

// PolicySpec is a description of a policy.
message PolicySpec {
  repeated string finalizers = 8;

  optional string tenantID = 1;

  optional string displayName = 7;

  optional string username = 2;

  // +optional
  optional string description = 3;

  // Subjects is the policy subjects.
  // +optional
  repeated string subjects = 4;

  optional Statement statement = 5;

  // +optional
  optional bytes conditions = 6;
}

// PolicyStatus represents information about the status of a policy.
message PolicyStatus {
  // +optional
  optional string phase = 1;

  // +optional
  // Subjects represents the objects the policy applies to.
  repeated Subject subjects = 2;
}

// Rule represents a rule document for access control.
message Rule {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of policy document in this set.
  optional RuleSpec spec = 2;
}

// RuleList is the whole list of all policies.
message RuleList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of rules.
  repeated Rule items = 2;
}

// RuleSpec is a description of a policy.
message RuleSpec {
  optional string ptype = 1;

  optional string v0 = 2;

  optional string v1 = 3;

  optional string v2 = 4;

  optional string v3 = 5;

  optional string v4 = 6;

  optional string v5 = 7;

  optional string v6 = 8;
}

// Statement defines a series of action on resource can be done or not.
message Statement {
  repeated string actions = 1;

  repeated string resources = 2;

  // Effect indicates action on the resource is allowed or not, can be "allow" or "deny"
  optional string effect = 3;
}

// Subject references a user can specify by id or name.
message Subject {
  optional string id = 1;

  optional string name = 2;
}

